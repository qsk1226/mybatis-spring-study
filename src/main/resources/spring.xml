<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.goddess.knowledge"/>

    <context:property-placeholder location="classpath:db.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc_driver}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>

    </bean>

    <!--<bean id="sqlExecuteTimeInterceptor" class="com.goddess.knowledge.interceptor.SqlExecuteTimeInterceptor"/>-->

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.goddess.knowledge.entity"/>
        <property name="mapperLocations" value="classpath:mapper/*/*.xml"/>
        <property name="plugins" ref="sqlExecuteTimeInterceptor"/>

    </bean>

    <!--
    <bean id="tUserMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.goddess.knowledge.mapper.HeroMapper"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
    -->


    <!--dao接口所在报名-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.goddess.knowledge.mapper"/>
    </bean>


    <!-- (事务管理)transaction manager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <qualifier value="transactionManager"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
        <property name="maxTotal" value="10000" /> 
        <property name="maxIdle" value="10" /> 
    </bean>   

    <bean id="jedisConnectionFactory" 	class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 	destroy-method="destroy"> 
        <property name="hostName" value="127.0.0.1" /> 
        <property name="port" value="6379" /> 
        <property name="database" value="0" /> 	<property name="timeout" value="3000" /> 	<property name="usePool" value="true" /> 	 <property name="poolConfig" ref="jedisPoolConfig" /> </bean>  <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 	<property name="connectionFactory" ref="jedisConnectionFactory" /> 	<property name="keySerializer"> 		<bean 			class="org.springframework.data.redis.serializer.StringRedisSerializer" /> 	</property> 	<property name="valueSerializer"> 		<bean 			class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> 	</property>  	<property name="enableTransactionSupport" value="false"></property> </bean>   &lt;!&ndash; declare Redis Cache Manager &ndash;&gt; <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"> 	<constructor-arg index="0" ref="redisTemplate"></constructor-arg> 		 <property name="expires"> 		<map> 			<entry key="amount" value="1"></entry> 			<entry key="amount_backup" value="1000"></entry> 		</map> 	</property> </bean>
-->

</beans>